{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;AAAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../../../../../../../../../../opt/homebrew/Cellar/ncc/0.38.1/libexec/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack/bootstrap","../webpack/runtime/compat",".././src/index.js"],"sourcesContent":[null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require(\"@actions/core\");\nconst github = require(\"@actions/github\");\n\n// Label sets (secondary labels are not included here)\nconst PRIMARY_LABELS = [\n  \"type::chore\",\n  \"type::bug\",\n  \"type::feature\",\n  \"type::security\",\n];\n\nconst BUG_LABELS = [\"bug::normal\", \"bug::regression\"];\n\nconst SEVERITY_LABELS = [\"severity::s1\", \"severity::s2\", \"severity::s3\"];\n\nasync function run() {\n  try {\n    // get inputs\n    const token = core.getInput(\"token\", { required: true });\n\n    // set up github client\n    const octokit = github.getOctokit(token);\n\n    // fetch the list of labels\n    const labels = (\n      await octokit.rest.issues.listLabelsOnIssue({\n        ...github.context.repo,\n        issue_number: github.context.issue.number,\n      })\n    ).data.map((label) => label.name);\n    core.debug(`Found labels: ${labels.join(\", \")}`);\n\n    // ensure exactly one primary label is set\n    const primaryLabels = PRIMARY_LABELS.filter((label) =>\n      labels.includes(label)\n    );\n    core.debug(`Found primary labels: ${primaryLabels.join(\", \")}`);\n    if (primaryLabels.length !== 1) {\n      throw new Error(\n        `Exactly one primary label must be set from [${PRIMARY_LABELS.join(\", \")}]. Found: ${primaryLabels.join(\", \")}`\n      );\n    }\n\n    // if the primary label is a bug, ensure a bug label is set\n    if (primaryLabels[0] === \"type::bug\") {\n      const bugLabels = BUG_LABELS.filter((label) => labels.includes(label));\n      core.debug(`type::bug is set, found bug labels: ${bugLabels.join(\", \")}`);\n      if (bugLabels.length !== 1) {\n        throw new Error(\n          `Exactly one bug label must be set for primary type::bug. Found: ${bugLabels.join(\n            \", \"\n          )}`\n        );\n      }\n    }\n\n    // ensure no more than one severity label is set\n    const severityLabels = SEVERITY_LABELS.filter((label) =>\n      labels.includes(label)\n    );\n    core.debug(`Found severity labels: ${severityLabels.join(\", \")}`);\n    if (severityLabels.length > 1) {\n      throw new Error(\n        `No more than one severity label may be set. Found: ${severityLabels.join(\n          \", \"\n        )}`\n      );\n    }\n  } catch (error) {\n    if (error instanceof Error) core.setFailed(error.message);\n  }\n}\n\nrun();\n"],"names":[],"sourceRoot":""}